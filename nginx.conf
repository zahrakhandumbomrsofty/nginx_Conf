user www-data;
worker_processes auto;
pid /run/nginx.pid;
error_log /var/log/nginx/error.log;
include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections 512;   # More than enough to handle 100 connections comfortably
    use epoll;                # Efficient for Linux and high concurrency
    multi_accept on;          # Allows faster handling of multiple connections
    accept_mutex off;         # Not required with low concurrency; can speed up connection handling
}

http{
    ###buffering
      client_body_buffer_size 1600K;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 16k;



     ## protection from the DDos attack 

    # Limit connection request rate and burst limit
     limit_req_zone $binary_remote_addr zone=one:10m rate=20r/s;
     limit_conn_zone $binary_remote_addr zone=addr:10m;

    # Connection limit settings
    limit_req zone=one burst=20 nodelay;
    limit_conn addr 15;

 
    client_body_timeout 10;
    client_header_timeout 10;
    keepalive_timeout 65;
    send_timeout 10;


     sendfile on;
    tcp_nopush on;
    tcp_nodelay on;



    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    client_max_body_size 16M;
    #####security shit 
    # include /etc/nginx/conf.d/security.conf;
    ####broctli related settings
#     brotli            on;
#    brotli_min_length 1499;
#    brotli_static     on;
#    brotli_comp_level 4;
#    brotli_types
#     application/atom+xml
#     application/javascript
#     application/json
#     application/ld+json
#     application/manifest+json
#     application/rss+xml
#     application/vnd.geo+json
#     application/vnd.ms-fontobject
#     application/wasm application/x-font-ttf
#     application/x-web-app-manifest+json
#     application/xhtml+xml application/xml
#     image/bmp
#     image/svg+xml
#     image/x-icon
#     font/opentype

#     text/cache-manifest
#     text/css
#     text/javascript
#     text/plain
#     text/vcard
#     text/vnd.rim.location.xloc
#     text/vtt
#     text/x-component
#     text/x-cross-domain-policy
#     text/xml
#     application/xml+rss;
      
  ### for logging the shit 
  access_log /var/log/nginx/access.log;

   ######
   gzip on;
gzip_vary on;
gzip_proxied any;
gzip_comp_level 6;
gzip_min_length 256;
gzip_buffers 16 8k;
gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript application/font-woff2 image/svg+xml;
gzip_disable "msie6";







## this is the lau
lua_package_path "/etc/nginx/?.lua;;";

 
lua_shared_dict cookie_store 1m;
    lua_shared_dict group_names_dict 1m;

    init_worker_by_lua_block {
        -- Load the cookie_init module
        local cookie_init = require("cookie_init")
         ngx.log(ngx.ERR, "This is an error message in the log")

         Initialize the cookie store with predefined cookie groups
        cookie_init.init_cookie_store(ngx.shared.cookie_store)

        -- Store the list of cookie group names in the shared dictionary for access if needed
        local group_names = ngx.shared.cookie_store:get_keys(0)
        local cjson = require("cjson.safe")
        ngx.shared.group_names_dict:set("group_names", cjson.encode(group_name)
        -- Seed the random generator
        math.randomseed(ngx.now() * 1000 + ngx.worker.pid())
    } 

    # Define shared memory zones
    

    map $arg_c $is_special_request {
        default 0;
        "value i want" 1;
    }

 #need to install the lau modules also 
 #########################################################

### starting the server block 
server{

    # listen 443 ssl http2;          # Enable HTTP/2
    # # listen [::]:443 ssl http2;      # Enable HTTP/2 for IPv6
    # # listen 443 quic reuseport;      # Enable QUIC for HTTP/3
    # # listen [::]:443 quic reuseport; # Enable QUIC for HTTP/3 on IPv6
    #  ### need to correct this also 
    #  listen 80 default_server;
    # # listen [::]:80 default_server;
    # server_name yourdomain.com www.yourdomain.com;
    # include /etc/nginx/ssl.conf;
 
    # listen 80 default_server;
    # listen [::]:80 default_server;
   
    # return 301 https://$host$request_uri;
    # add_header Alt-Svc 'h3-29=":443"'; 

listen 80;                   # Listen on port 80 for HTTP
    listen [::]:80;              # Listen on port 80 for IPv6

    server_name localhost; 
# Shared settings for proxying external servers
set $scopedlens_files https://files.scopedlens.com;
set $sentry_js https://js.sentry-cdn.com;
set $sentry_browser https://browser.sentry-cdn.com;
set $cloudflare_insights https://static.cloudflareinsights.com;
set $scopedlens_main https://scopedlens.com;

# ScopedLens Static Assets (CSS, JS, Images, Favicons)
location ~* ^/(webpack_bundles|images|js|android-chrome-192x192\.png|favicons|site\.webmanifest)$ {
    try_files /var/www/static$uri @proxy_scopedlens_files;

}

# Fallback Proxy for ScopedLens static assets if not found locally
location @proxy_scopedlens_files {
    proxy_set_header Accept-Encoding "gzip";
    proxy_pass $scopedlens_files$request_uri;
    proxy_set_header Host files.scopedlens.com;
    proxy_ssl_server_name on;

}

# Sentry JS Bundle
location = /3dd2352722bbe1fcdd4c5d4a4c115a0d.min.js {
    try_files /var/www/static$uri @proxy_sentry_js;

}

location @proxy_sentry_js {
    proxy_pass $sentry_js$request_uri;
    proxy_set_header Host js.sentry-cdn.com;
    proxy_ssl_server_name on;

}
location /lua_test {
    content_by_lua_block {
        ngx.log(ngx.ERR, "Entering /lua_test content_by_lua_block")
        ngx.say("Lua is working!")
    }
}

# Sentry Browser Scripts
location ~* ^/([0-9]+\.[0-9]+\.[0-9]+)/bundle\.tracing\.replay\.debug\.min\.js$ {
    try_files /var/www/static$uri @proxy_sentry_browser;
  

}

location @proxy_sentry_browser {
    proxy_pass $sentry_browser$request_uri;
    proxy_set_header Host browser.sentry-cdn.com;
    proxy_ssl_server_name on;
  
}

# Cloudflare Email Decode Script
location = /cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js {
    try_files /var/www/static$uri @proxy_cloudflare_insights;
  
}

# Cloudflare Insights beacon
location /beacon.min.js/ {
    try_files /var/www/static$uri @proxy_cloudflare_insights;
  
}

location @proxy_cloudflare_insights {
    proxy_pass $cloudflare_insights$request_uri;
    proxy_set_header Host static.cloudflareinsights.com;
    proxy_ssl_server_name on;
  
}

# Sentry Ingest API
location = /api/4506857361113088/envelope/ {
    proxy_pass https://o4505786333200384.ingest.us.sentry.io$request_uri;
    proxy_set_header Host o4505786333200384.ingest.us.sentry.io;
    proxy_ssl_server_name on;
    
}

# ScopedLens Self-Service and Submission Pages with Lua Filtering
location ~* ^/self-service/submissions? {
    proxy_pass $scopedlens_main$request_uri;
    proxy_set_header Host scopedlens.com;
    proxy_ssl_server_name on;
  
    proxy_buffering on;
body_filter_by_lua_block {
    local ctx = ngx.ctx
    local chunk, eof = ngx.arg[1], ngx.arg[2]
    
    if ctx.buffered == nil then
        ctx.buffered = {}
    end

    if chunk ~= "" then
        table.insert(ctx.buffered, chunk)
        ngx.arg[1] = nil
    end

    if eof then
        local whole = table.concat(ctx.buffered)
        ctx.buffered = nil

        -- Remove domain from all URLs, leaving only the path
        whole = whole:gsub("https?://[%w%.%-]+", "")

        -- Remove the specific HTML button snippet
        local snippet_to_remove = '<button class="navbar%-toggler" type="button" data%-bs%-toggle="offcanvas" data%-bs%-target="#offcanvasNavbar2" aria%-controls="offcanvasNavbar2" aria%-label="Toggle navigation">%s*<span class="navbar%-toggler%-icon"></span>%s*</button>'
        whole = whole:gsub(snippet_to_remove, "")

        ngx.arg[1] = whole
        ngx.arg[2] = true
    else
        ngx.arg[1] = nil
    end
}

}

# Specific path with additional Lua processing
location = /self-service/submission/create {
    proxy_pass $scopedlens_main$request_uri;
    proxy_set_header Host scopedlens.com;
    proxy_ssl_server_name on;
    proxy_buffering on;
     

    body_filter_by_lua_block {
        local ctx = ngx.ctx
        local chunk, eof = ngx.arg[1], ngx.arg[2]
        if ctx.buffered == nil then ctx.buffered = {} end
        if chunk ~= "" then
            table.insert(ctx.buffered, chunk)
            ngx.arg[1] = nil
        end
        if eof then
            local whole = table.concat(ctx.buffered)
            ctx.buffered = nil
            whole = whole:gsub("https://files.scopedlens.com", "")
             -- Remove domain from all URLs, leaving only the path
            whole = whole:gsub("https?://[%w%.%-]+", "")
            local snippet_to_remove = '<button class="navbar%-toggler" type="button" data%-bs%-toggle="offcanvas" data%-bs%-target="#offcanvasNavbar2" aria%-controls="offcanvasNavbar2" aria%-label="Toggle navigation">%s*<span class="navbar%-toggler%-icon"></span>%s*</button>'
            whole = whole:gsub(snippet_to_remove, "")
            ngx.arg[1] = whole
            ngx.arg[2] = true
        else
            ngx.arg[1] = nil
        end
    }
}

# Custom Location for Lua Cookie Logic
location = /shit {
#    content_by_lua_block {
#                 local cookie_init = require("cookie_init")
#                 ngx.log(ngx.ERR, "This is an error message in the log")

#                 -- Select a random cookie group to be set in headers
#                 cookie_init.select_random_cookie_group(ngx.shared.cookie_store)
                
#                 ngx.say("Selected random cookie group and set in headers.")
#             }

#             # Filter to set cookies in headers
#             header_filter_by_lua_block {
#                 local cookies = ngx.ctx.selected_cookies
#                 if cookies then
#                     local set_cookie_headers = {}
#                     for _, cookie in ipairs(cookies) do
#                         local cookie_str = cookie.name .. "=" .. cookie.value
#                         if cookie.expires then cookie_str = cookie_str .. "; Expires=" .. cookie.expires end
#                         if cookie.path then cookie_str = cookie_str .. "; Path=" .. cookie.path end
#                         if cookie.domain then cookie_str = cookie_str .. "; Domain=" .. cookie.domain end
#                         if cookie.secure then cookie_str = cookie_str .. "; Secure" end
#                         if cookie.http_only then cookie_str = cookie_str .. "; HttpOnly" end
#                         if cookie.same_site then cookie_str = cookie_str .. "; SameSite=" .. cookie.same_site end
#                         table.insert(set_cookie_headers, cookie_str)
#                     end
#                     ngx.header['Set-Cookie'] = set_cookie_headers
#                 end
#             }


 

#     body_filter_by_lua_block {
#         local ctx = ngx.ctx
#         local chunk, eof = ngx.arg[1], ngx.arg[2]
#         if ctx.buffered == nil then ctx.buffered = {} end
#         if chunk ~= "" then
#             table.insert(ctx.buffered, chunk)
#             ngx.arg[1] = nil
#         end
#         if eof then
#             local whole = table.concat(ctx.buffered)
#             ctx.buffered = nil
#             whole = whole:gsub("https://files.scopedlens.com", "")
#             -- Remove domain from all URLs, leaving only the path
#             whole = whole:gsub("https?://[%w%.%-]+", "")
#             local snippet_to_remove = '<button class="navbar%-toggler" type="button" data%-bs%-toggle="offcanvas" data%-bs%-target="#offcanvasNavbar2" aria%-controls="offcanvasNavbar2" aria%-label="Toggle navigation">%s*<span class="navbar%-toggler%-icon"></span>%s*</button>'
#             whole = whole:gsub(snippet_to_remove, "")
#             ngx.arg[1] = whole
#             ngx.arg[2] = true
#         else
#             ngx.arg[1] = nil
#         end
#     }
#  #       ngx.log(ngx.ERR, "This is an error message in the log");

    proxy_pass $scopedlens_main/self-service/submissions/;
    proxy_buffering on;
}


# Chrome Extension resources (ignore since they can't be proxied)
location ~* ^/chrome-extension:// {
    return 403;
  
}

# ScopedLens RUM (Real User Monitoring)
location /cdn-cgi/rum {
    proxy_pass $scopedlens_main$request_uri;
    proxy_set_header Host scopedlens.com;
    proxy_ssl_server_name on;
  
}




location /cdn-cgi/challenge-platform/h/b/scripts/jsd/22755d9a86c9/main.js {
    proxy_pass https://scopedlens.com$request_uri;
    proxy_set_header Host scopedlens.com;
    proxy_ssl_server_name on;
    
}


location /cdn-cgi/challenge-platform/h/b/jsd/r/8dc3f955da61ce41 {
    proxy_pass https://scopedlens.com$request_uri;
    proxy_set_header Host scopedlens.com;
    proxy_ssl_server_name on;
   
}

}








}
  
     




        

   